<?xml version="1.0" encoding="UTF-8"?>

<mule
	xmlns:os="http://www.mulesoft.org/schema/mule/os"
	xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
	xmlns:validation="http://www.mulesoft.org/schema/mule/validation"
	xmlns:file="http://www.mulesoft.org/schema/mule/file"
	xmlns:mongo="http://www.mulesoft.org/schema/mule/mongo"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/mongo http://www.mulesoft.org/schema/mule/mongo/current/mule-mongo.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/os http://www.mulesoft.org/schema/mule/os/current/mule-os.xsd">
	<sub-flow name="start_log_and_variables"
		doc:id="944c896e-dce1-42a4-b2fe-ec1b7fc21cca">
		<logger level="INFO" doc:name="Start log"
			doc:id="391c182f-a167-4b7a-bebb-9128acbca7bd"
			message='#["The application has been launched"]' />
		<set-variable
			value="#[message.attributes.queryParams.limit default 100]"
			doc:name="Set limit" doc:id="51e13b5a-cae2-4a85-aafc-8d5c5768a1ee"
			variableName="limit" />
		<set-variable
			value="#[message.attributes.queryParams.offset]"
			doc:name="Set offset" doc:id="4f327e66-08db-4fd9-9176-f09cb7319d77"
			variableName="offset" />
		<set-variable
			value='#[message.attributes.queryParams.name default ""]'
			doc:name="Set name"
			doc:id="00fe79b6-a3c0-4751-a811-d4978a3cee41" variableName="name" />
		<set-variable
			value='#[message.attributes.queryParams.mode default "detailed"]'
			doc:name="Set mode" doc:id="9007427b-1199-4d46-9bfd-0776a864feda"
			variableName="mode" />
		<validation:matches-regex
			doc:name="Check for mode validity"
			doc:id="b5831dff-3919-4259-80bc-62121c0af587"
			config-ref="Validation_Config" value="#[vars.mode]"
			regex="${validation.mode.regex}" message="${validation.mode.message}">
			<error-mapping sourceType="VALIDATION:MISMATCH"
				targetType="APP:INVALID_MODE" />
		</validation:matches-regex>
	</sub-flow>
	<sub-flow name="getLaunchesAndPlanets"
		doc:id="2eafa69c-7893-4f17-af7e-e2614ae1264d">
		<http:request method="GET" doc:name="getLaunches"
			doc:id="33edb96d-bfdb-4eab-9f50-609278864808"
			config-ref="HTTP_Request_configuration_Launches"
			path='${launches.path}'
			responseTimeout="60000" >
			<http:query-params ><![CDATA[#[output application/json
---
{
	"offset" : vars.offset,
	"limit" : vars.limit
}]]]></http:query-params>
		</http:request>
		<ee:transform doc:name="Basic data filtering"
			doc:id="e98ff262-b8ce-4f83-8723-3ac6e1e40b50">
			<ee:message>
			</ee:message>
			<ee:variables>
				<ee:set-variable variableName="launch_planet_arr" ><![CDATA[%dw 2.0
output application/json
---
[]]]></ee:set-variable>
				<ee:set-variable variableName="launchInfo" ><![CDATA[%dw 2.0
output application/json
---
payload.launches filter ((item, index) -> item.launch_service_provider == vars.name) map ( launch , indexOfLaunch ) -> {
	name: launch.name default "",
	status: launch.status default "",
	launch_year: launch.launch_year default "",
	failreason: launch.failreason default "",
	rocket: {
		name: launch.rocket.name default "",
		family: launch.rocket.family default "",
		full_name: launch.rocket.full_name default "",
		variant: launch.rocket.variant default ""
	},
	mission: {
		name: launch.mission.name default "",
		description: launch.mission.description default "",
		"type": launch.mission."type" default "",
		orbit: launch.mission.orbit default "",
		planet_of_interest: ""
	},
	pad: {
		name: launch.pad.name default "",
		location: {
			name: launch.pad.location.name default "",
			country_code: launch.pad.location.country_code default "",
			total_launch_count: launch.pad.location.total_launch_count default "",
			total_landing_count: launch.pad.location.total_landing_count default ""
		}
	}
}]]></ee:set-variable>
			
</ee:variables>
		</ee:transform>
		<foreach doc:name="For Each"
			doc:id="a2eb3e74-bea9-4626-9152-6842a4b0f1b8"
			collection="#[vars.launchInfo]">
			<set-variable value="#[payload]"
				doc:name="Set oneLaunch"
				doc:id="96d1c54e-3caa-43b8-9b9c-95bc81175bf7"
				variableName="oneLaunch" />
			<set-variable doc:name="Set planetName"
				doc:id="5242e890-7c2e-4794-aca0-f76641b808ea"
				variableName="planetName"
				value="#[java!org::spaceagencies::utils::MyUtils::getPlanetName(vars.oneLaunch.mission.description)]" />
			<choice doc:name="Choice"
				doc:id="145eec21-9d4e-4da9-b741-61f43d5949be">
				<when expression='#[vars.planetName != ""]'>
					<http:request method="GET" doc:name="getPlanet"
						doc:id="f90465f9-31db-49bb-99c7-17a429dc13c9"
						config-ref="HTTP_Request_configuration_Planets"
						path='${planets.path1}'
						responseTimeout="60000" >
						<http:query-params ><![CDATA[#[output application/json
---
{
	"name" : vars.planetName
}]]]></http:query-params>
					</http:request>
					<ee:transform doc:name="Planet info"
						doc:id="c20c49c7-d509-490e-a55e-5eb891dcf463">
						<ee:message>
							<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
	name: payload[0].name,
	moons: payload[0].moons.moon default [],
	semimajorAxis: payload[0].semimajorAxis,
	perihelion: payload[0].perihelion,
	aphelion: payload[0].aphelion,
	eccentricity: payload[0].eccentricity,
	inclination: payload[0].inclination,
	mass: payload[0].mass.massValue,
	density: payload[0].density,
	gravity: payload[0].gravity,
	meanRadius: payload[0].meanRadius,
	polarRadius: payload[0].polarRadius,
	discoveredBy: payload[0].discoveredBy,
	discoveryDate: payload[0].discoveryDate,
	alternativeName: payload[0].alternativeName,
	axialTilt: payload[0].axialTilt,
	avgTemp: payload[0].avgTemp
}]]></ee:set-payload>
						</ee:message>
					</ee:transform>
					<ee:transform doc:name="One launch with planet info"
						doc:id="9319699e-3513-441a-8a75-5730d898e78a">
						<ee:message>
							<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
	name: vars.oneLaunch.name default "",
	status: vars.oneLaunch.status default "",
	launch_year: vars.oneLaunch.launch_date default "",
	failreason: vars.oneLaunch.failreason default "",
	rocket: {
		name: vars.oneLaunch.rocket.name default "",
		family: vars.oneLaunch.rocket.family default "",
		full_name: vars.oneLaunch.rocket.full_name default "",
		variant: vars.oneLaunch.rocket.variant default ""
	},
	mission: {
		name: vars.oneLaunch.mission.name default "",
		description: vars.oneLaunch.mission.description default "",
		"type": vars.oneLaunch.mission."type" default "",
		orbit: vars.oneLaunch.mission.orbit default "",
		planet_of_interest: payload
	},
	pad: {
		name: vars.oneLaunch.pad.name default "",
		location: {
			name: vars.oneLaunch.pad.location.name default "",
			country_code: vars.oneLaunch.pad.location.country_code default "",
			total_launch_count: vars.oneLaunch.pad.location.total_launch_count default "",
			total_landing_count: vars.oneLaunch.pad.location.total_landing_count default ""
		}
	}
}]]></ee:set-payload>
						</ee:message>
					</ee:transform>
					<ee:transform
						doc:name="Adding payload to launch_planet_arr"
						doc:id="d4fc3172-6da2-491d-af73-016e4dcfb9ed">
						<ee:message />
						<ee:variables>
							<ee:set-variable variableName="launch_planet_arr"><![CDATA[%dw 2.0
output application/json
---
vars.launch_planet_arr + payload]]></ee:set-variable>
						</ee:variables>
					</ee:transform>
				</when>
				<otherwise>
					<ee:transform
						doc:name="Adding oneLaunch to launch_planet_arr"
						doc:id="e19dcb1b-ab8a-47d3-b30c-7e017d5b22c6">
						<ee:message />
						<ee:variables>
							<ee:set-variable variableName="launch_planet_arr"><![CDATA[%dw 2.0
output application/json
---
vars.launch_planet_arr + vars.oneLaunch]]></ee:set-variable>
						</ee:variables>
					</ee:transform>
				</otherwise>
			</choice>
		</foreach>
		<ee:transform doc:name="Final launch_planet_arr"
			doc:id="61dc42ea-6c72-4170-a105-e56c6b71f7ca">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
vars.launch_planet_arr]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</sub-flow>
	<sub-flow name="getStations"
		doc:id="b42af5cc-cf60-4c11-a8d8-747d58ba7b54">
		<http:request method="GET" doc:name="getStations"
			doc:id="c66dd9e8-1c9f-45c9-a86e-500b387bea61"
			config-ref="HTTP_Request_configuration_Stations" path="${stations.path}"
			responseTimeout="60000" />
		<ee:transform doc:name="Basic data filtering"
			doc:id="0744ac6c-cc23-4479-88b0-247806b1ff68">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
payload filter ((item, index) -> item.owners contains(vars.name))]]></ee:set-payload>
			</ee:message>
			<ee:variables>
			</ee:variables>
		</ee:transform>
	</sub-flow>
	<sub-flow name="getRockets"
		doc:id="914ffeb8-e7b5-4944-8f20-c86bfabd505b">
		<http:request method="GET" doc:name="getRockets"
			doc:id="9d5934e9-c4b8-4d25-9588-2e12dd167033"
			config-ref="HTTP_Request_configuration_Rockets" path="launcher">
			<http:query-params><![CDATA[#[output application/json
---
{
	"offset" : vars.offset,
	"limit" : vars.limit
}]]]></http:query-params>
		</http:request>
		<ee:transform doc:name="Basic data filtering"
			doc:id="b622ad06-bf02-43f4-aead-b5189ed3e81c">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
payload.results filter ((item, index) -> item.manufacturer.name == vars.name) map ( result , indexOfResult ) -> {
	name: result.name,
	manufacturer: {
		name: result.manufacturer.name default "",
		"type": result.manufacturer."type" default "",
		country_code: result.manufacturer.country_code default "",
		description: result.manufacturer.description default "",
		founding_year: result.manufacturer.founding_year default "",
		image_url: result.manufacturer.image_url default ""
	},
	program: result.program map ( program , indexOfProgram ) -> {
		name: program.name,
		description: program.description default "",
		agencies: program.agencies.name default "",
		image_url: program.image_url default "",
		start_date: program.start_date default "",
		end_date: program.end_date default "",
		wiki_url: program.wiki_url default ""
	},
	family: result.family default "",
	full_name: result.full_name default "",
	variant: result.variant default "",
	reusable: result.reusable,
	image_url: result.image_url default "",
	wiki_url: result.wiki_url default ""
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</sub-flow>
	<sub-flow name="primaryDataRetrieving"
		doc:id="7bee803a-da23-4a94-94c4-e1c088ddd942">
		<flow-ref doc:name="start_log and variables"
			doc:id="fc442cc5-ffb5-4607-8f6a-e0de95c4da68"
			name="start_log_and_variables" />
		<scatter-gather doc:name="Scatter-Gather"
			doc:id="5f3c3e3b-3331-4e2b-8c6c-856a7cb06ee4">
			<route>
				<flow-ref doc:name="getLaunchesAndPlanets"
					doc:id="42242f03-0978-422b-b0d7-7764fe58ea1f"
					name="getLaunchesAndPlanets" />
			</route>
			<route>
				<flow-ref doc:name="getStations"
					doc:id="6f9bf2c0-80bf-409f-b1b3-621f430cefb4" name="getStations" />
			</route>
			<route>
				<flow-ref doc:name="getRockets"
					doc:id="72529153-02b0-4344-bcaa-bc530594f8eb" name="getRockets" />
			</route>
		</scatter-gather>
		<choice doc:name="Choice"
			doc:id="fabded54-6746-4f5a-8e5b-510b45b089a3">
			<when
				expression='#[payload."1".payload == [] and payload."0".payload == [] and payload."2".payload == []]'>
				<raise-error doc:name="ALL_EMPTY error"
					doc:id="932ec67f-8a65-4aa8-94e0-e1533055c6f4" type="APP:ALL_EMPTY"
					description="${error_messaging.all_empty_agencies}" />
			</when>
			<otherwise>
				<logger level="INFO" doc:name="Default block logger"
					doc:id="69d89a3a-3ccb-488a-8d70-7d9a5d4a5ceb"
					message='#["Default block execution. Payload is not empty."]' />
			</otherwise>
		</choice>
	</sub-flow>
	<sub-flow name="agencyWithStationAndLaunches"
		doc:id="6c9f186d-7f41-4d50-bc6c-38d4417189c0">
		<flow-ref doc:name="primaryDataRetrieving"
			doc:id="75d4a96f-af07-4e31-85e3-b74d417eeaf4"
			name="primaryDataRetrieving" />
		<ee:transform doc:name="Final detailed representation"
			doc:id="1f947523-f746-44c6-afb8-96e137eeb4f2">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
[{
  agency: vars.name,
  stations: if (sizeOf(payload."1".payload) == 0) 
	"There are no records on this page about space stations owned by the " ++ vars.name ++ "."
  else {
    stations_count: sizeOf(payload."1".payload),
	stations_list: payload."1".payload
  },
  launches: if (sizeOf(payload."0".payload) == 0) 
    "There are no records of space launches made by the " ++ vars.name ++ " on this page."
  else {
    launches_count: sizeOf(payload."0".payload),
    launches_list: payload."0".payload
  },
  rockets: if (sizeOf(payload."2".payload) == 0) 
    "There are no records on this page about rockets manufactured by the " ++ vars.name ++ "."
  else {
    rockets_count: sizeOf(payload."2".payload),
	rockets_list: payload."2".payload
  }
}]]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="Agency info modes"
			doc:id="785c1af3-b842-48e0-883c-0236e4033030">
			<ee:message>
			</ee:message>
			<ee:variables>
				<ee:set-variable variableName="normal_mode"><![CDATA[%dw 2.0
output application/json
---
payload map ( generalInfo , index ) -> {
	agency: generalInfo.agency,
	stations: if (generalInfo.stations is String)
      generalInfo.stations
    else {
		stations_count: generalInfo.stations.stations_count,
		stations_list: generalInfo.stations.stations_list map ( stationslist , indexOfStationslist ) -> {
			name: stationslist.name,
			status_name: stationslist.status_name,
			founded: stationslist.founded,
			deorbited: stationslist.deorbited,
			description: stationslist.description,
			orbit: stationslist.orbit,
			owners: stationslist.owners map ( owner , indexOfOwner ) -> owner,
			image_url: stationslist.image_url
		}
	},
	launches: if (generalInfo.launches is String)
      generalInfo.launches
    else {
		launches_count: generalInfo.launches.launches_count,
		launches_list: generalInfo.launches.launches_list map ( launcheslist , indexOfLauncheslist ) -> {
			name: launcheslist.name,
			status: launcheslist.status,
			launch_year: launcheslist.launch_year,
			rocket_name: launcheslist.rocket.name,
			mission: {
				name: launcheslist.mission.name,
				description: launcheslist.mission.description,
				planet_of_interest: if (launcheslist.mission.planet_of_interest == "")
				        ""
				    else {
					name: launcheslist.mission.planet_of_interest.name,
					moons: launcheslist.mission.planet_of_interest.moons map ( moon , indexOfMoon ) -> moon,
					semimajorAxis: launcheslist.mission.planet_of_interest.semimajorAxis,
					perihelion: launcheslist.mission.planet_of_interest.perihelion,
					aphelion: launcheslist.mission.planet_of_interest.aphelion,
					mass: launcheslist.mission.planet_of_interest.mass,
					gravity: launcheslist.mission.planet_of_interest.gravity,
					meanRadius: launcheslist.mission.planet_of_interest.meanRadius,
					discoveredBy: launcheslist.mission.planet_of_interest.discoveredBy,
					discoveryDate: launcheslist.mission.planet_of_interest.discoveryDate,
					axialTilt: launcheslist.mission.planet_of_interest.axialTilt,
					avgTemp: launcheslist.mission.planet_of_interest.avgTemp
				}
			},
			pad: {
				name: launcheslist.pad.name,
				location: launcheslist.pad.location.name
			}
		}
	},
	rockets: if (generalInfo.rockets is String)
      generalInfo.rockets
    else {
		rockets_count: generalInfo.rockets.rockets_count,
		rockets_list: generalInfo.rockets.rockets_list map ( rocketslist , indexOfRocketslist ) -> {
			name: rocketslist.name,
			program: rocketslist.program.name,
			family: rocketslist.family,
			reusable: rocketslist.reusable,
			image_url: rocketslist.image_url,
			wiki_url: rocketslist.wiki_url
		}
	}
}]]></ee:set-variable>
				<ee:set-variable variableName="list_mode"><![CDATA[output application/json
---
payload map ( generalInfo , index ) -> {
	agency: generalInfo.agency,
	stations: if (generalInfo.stations is String)
	  generalInfo.stations
	else {
		stations_count: generalInfo.stations.stations_count,
		stations_list: generalInfo.stations.stations_list.name
	},
	launches: if (generalInfo.launches is String)
	  generalInfo.launches
	else {
		launches_count: generalInfo.launches.launches_count,
		launches_list: generalInfo.launches.launches_list.name
	},
	rockets: if (generalInfo.rockets is String)
	  generalInfo.rockets
	else {
		rockets_count: generalInfo.rockets.rockets_count,
		rockets_list: generalInfo.rockets.rockets_list.name
	}
}]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<ee:transform doc:name="Mode choice"
			doc:id="8ce6474a-003f-4d97-a67d-204ab837ef55">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
if (vars.mode == "normal")
    vars.normal_mode
else if (vars.mode == "list")
    vars.list_mode
else
    payload]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="End logger" doc:id="67bc629d-fdec-4d96-b9ae-be64fe6ea0f9" message="Retrieved data #[payload]"/>
	</sub-flow>
	<sub-flow name="launchesAndStationsByAgencyAndYear"
		doc:id="c373dc04-0fb0-499a-bbff-bc6ebea1763f">
		<flow-ref doc:name="start_log and variables"
			doc:id="3450ab5a-6b4c-4846-8759-68318ef4b74f"
			name="start_log_and_variables" />
		<set-variable
			value="#[message.attributes.queryParams.year]" doc:name="Set year"
			doc:id="0677cae9-079f-4b4c-9b2d-8384a25d0a70" variableName="year" />
		<validation:matches-regex
			doc:name="Check for year validity"
			doc:id="3d594f44-10de-4bfc-b16f-892e1e2e4ae9"
			config-ref="Validation_Config" value="#[vars.year]"
			regex="${validation.year.regex}" message="${validation.year.message}">
			<error-mapping sourceType="VALIDATION:MISMATCH"
				targetType="APP:INVALID_YEAR" />
		</validation:matches-regex>
		<scatter-gather doc:name="Scatter-Gather"
			doc:id="867d81b6-5b92-42de-8527-6b41a1e83696">
			<route>
				<flow-ref doc:name="getLaunchesAndPlanets"
					doc:id="0e30aa53-85f6-49ee-b65f-b2ec61ed2724"
					name="getLaunchesAndPlanets" />
				<ee:transform doc:name="Filtering by year"
					doc:id="e0232cbd-dc63-450e-8d60-84bd99084a9c">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
payload filter ((item, index) -> item.launch_year == vars.year)]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</route>
			<route>
				<flow-ref doc:name="getStations" doc:id="8a73f188-f815-46d6-a429-784a9b5d2230" name="getStations"/>
				<ee:transform
					doc:name="Filtering by agency name and activity years"
					doc:id="4d908a1c-37fb-480d-865e-51029f405076">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
payload filter ((item, index) -> (item.founded[0 to 3] as Number <= vars.year as Number) and 
	((item.deorbited == null) or (item.deorbited[0 to 3] as Number > vars.year as Number))) 
	map ( payload01 , indexOfPayload01 ) -> {
	name: payload01.name,
	status: payload01.status_name,
	"type": payload01."type",
	founded: payload01.founded,
	deorbited: payload01.deorbited as String default "",
	description: payload01.description,
	orbit: payload01.orbit,
	owners: payload01.owners map ( owner , indexOfOwner ) -> owner,
	image_url: payload01.image_url
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</route>
			<route>
				<http:request method="GET" doc:name="getSolarSystemObjects"
					doc:id="15455fb9-0856-4616-974d-81ff09417134"
					config-ref="HTTP_Request_configuration_Planets"
					path='${planets.path2}' >
					<http:query-params ><![CDATA[#[output application/json
---
{
	"year" : vars.year
}]]]></http:query-params>
				</http:request>
			</route>
		</scatter-gather>
		<choice doc:name="Choice"
			doc:id="12e6ee87-6211-4ad2-8e61-d53e13e475cc">
			<when
				expression='#[payload."0".payload == [] and payload."1".payload == []]'>
				<raise-error doc:name="ALL_EMPTY error"
					doc:id="decc200a-a371-43a9-bb1c-782c5a953a95" type="APP:ALL_EMPTY"
					description="${error_messaging.all_empty_info}" />
			</when>
			<otherwise>
				<logger level="INFO" doc:name="Default block logger"
					doc:id="cfb2493b-2246-4ac2-85c8-75a112d007c4"
					message='#["Default block execution. Payload is not empty."]' />
			</otherwise>
		</choice>
		<ee:transform doc:name="Final representation"
			doc:id="833a30cf-2319-42ee-8f20-5d7c0b1265a2">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
[{
  agency: vars.name,
  launches: if (sizeOf(payload."0".payload) == 0) 
    "In specified year, the " ++ vars.name ++ " did not carry out space launches."
  else {
    launches_count: sizeOf(payload."0".payload),
    launches_list: payload."0".payload
  },
  stations: if (sizeOf(payload."1".payload) == 0)
    "In specified year, the " ++ vars.name ++ " did not have active space stations."
  else {
    stations_count: sizeOf(payload."1".payload),
    stations_list: payload."1".payload
  },
  discovered_objects: if (sizeOf(payload."2".payload) == 0)
    "No new solar system objects were discovered in specified year."
  else {
    objects_count: sizeOf(payload."2".payload),
    objects_list: payload."2".payload
  }
}]]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="End logger" doc:id="a5aa6ff7-a855-459d-9b41-391f2392235d" message="Retrieved data #[payload]"/>
	</sub-flow>
	<sub-flow name="helpFlow" doc:id="3cb3089f-e931-42b7-909c-9cf2ce80a009" >
		<ee:transform doc:name="Help Info" doc:id="278a685b-8cea-44b9-8924-763a4b30e72d">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
    "info": {
        "endpoints": ["/api/agencies ": {
            "1": "name",
            "2": "mode",
            "3": "limit",
            "4": "offset"
        },
            "/api/infoByAgencyAndYear": {
            "1": "name",
            "2": "year",
            "3": "limit",
            "4": "offset"
        },
            "/api/database": {
            "1": "name",
            "2": "offset"
        }],
        "1": "For correct searching write the name of agency",
        "2": "Do not repeat the same offset and limit for one agency",
        "QueryParams:": {
            "1": "name",
            "2": "mode",
            "3": "limit",
            "4": "offset",
            "5": "year"
        }
    },
    "mode": {
        "1": "detailed",
        "2": "normal",
        "3": "list"
    },
    "agency": {
        "1": "1worldspace",
        "2": "Ad Astra Rocket Company",
        "3": "Aerojet",
        "4": "Aeronautics and Space Research and Diffusion Center",
        "5": "Aérospatiale",
        "6": "Aevum",
        "7": "Airbus Defence and Space",
        "8": "Algerian Space Agency",
        "9": "Alliant Techsystems",
        "10": "AlYahSat",
        "11": "American Rocket Company",
        "12": "A.M. Makarov Yuzhny Machine-Building Plant",
        "13": "Amsat",
        "14": "Andrews Space",
        "15": "Antrix Corporation Limited",
        "16": "Arab Satellite Communications Organization",
        "17": "Arianespace",
        "18": "Armadillo Aerospace",
        "19": "Army Ballistic Missile Agency",
        "20": "Asia Pacific Multilateral Cooperation in Space Technology and Applications",
        "21": "Asia-Pacific Regional Space Agency Forum",
        "22": "Asia-Pacific Space Cooperation Organization",
        "23": "Astra Space",
        "24": "Astrium Satellites",
        "25": "Astronautic Technology Sdn Bhd",
        "26": "Austrian Space Agency",
        "27": "Avanti Communications",
        "28": "Avio S.p.A",
        "29": "Axiom Space",
        "30": "Azerbaijan National Aerospace Agency",
        "31": "Ball Aerospace & Technologies Corp.",
        "32": "Belarus Space Agency",
        "33": "Belgian Institute for Space Aeronomy",
        "34": "Bigelow Aerospace",
        "35": "Blue Origin",
        "36": "Boeing",
        "37": "Bolivarian Agency for Space Activities",
        "38": "Bolivian Space Agency",
        "39": "Brazilian Space Agency",
        "40": "Bristol Aerospace Company",
        "41": "British Aerospace",
        "42": "British Satellite Broadcasting",
        "43": "Broadcasting Satellite System Corporation",
        "44": "Bulgarian Space Agency",
        "45": "Canadian Arrow",
        "46": "Canadian Space Agency",
        "47": "Centre for Remote Imaging, Sensing and Processing",
        "48": "China Aerospace Corporation",
        "49": "China Aerospace Science and Industry Corporation",
        "50": "China Aerospace Science and Technology Corporation",
        "51": "China Great Wall Industry Corporation",
        "52": "China National Space Administration",
        "53": "Chinarocket Co., Ltd.",
        "54": "Chrysler",
        "55": "Colombian Space Commission",
        "56": "Comisión Nacional de Actividades Espaciales",
        "57": "Committee on Space Research",
        "58": "Commonwealth Scientific and Industrial Research Organisation",
        "59": "Consultative Committee for Space Data Systems",
        "60": "Convair",
        "61": "Copenhagen Suborbitals",
        "62": "Croatian Space Agency",
        "63": "Danish National Space Center",
        "64": "Deep Space Industries",
        "65": "Department of Aerospace Science and Technology",
        "66": "Digital Globe",
        "67": "Direction générale de l'armement",
        "68": "DirecTV",
        "69": "EADS Astrium Space Transportation",
        "70": "Echostar",
        "71": "Energia",
        "72": "Eurockot Launch Services",
        "73": "European Launcher Development Organisation",
        "74": "European Organisation for the Exploitation of Meteorological Satellites",
        "75": "European Space Agency",
        "76": "European Space Research Organisation",
        "78": "Eutelsat",
        "79": "EXOS Aerospace",
        "80": "ExPace",
        "81": "Fairchild Space and Electronics Division",
        "82": "FCT Space Office",
        "83": "Firefly Aerospace",
        "84": "Fokker Space & Systems",
        "85": "French Armed Forces",
        "86": "Galactic Energy",
        "87": "General Dynamics",
        "88": "General Electric",
        "89": "Geo-Informatics and Space Technology Development Agency",
        "90": "GeoOptics",
        "91": "German Aerospace Center",
        "92": "Gilmour Space Technologies",
        "93": "GK Launch Services",
        "94": "Globalstar",
        "95": "Hawker Siddeley Dynamics",
        "96": "Hisdesat",
        "97": "HispaSat",
        "98": "Hughes",
        "99": "Hughes Aircraft",
        "100": "Hungarian Space Office",
        "101": "IHI Corporation",
        "102": "Indian Space Research Organization",
        "103": "Inmarsat",
        "104": "Institute for Space Applications and Remote Sensing",
        "105": "Institute of Space and Astronautical Science",
        "106": "Instituto Nacional de Técnica Aeroespacial",
        "107": "Intelsat",
        "108": "International Launch Services",
        "109": "Interorbital Systems",
        "110": "Interstellar Technologies",
        "111": "INVAP",
        "112": "Iranian Space Agency",
        "113": "Iridium Communications",
        "114": "ISC Kosmotras",
        "115": "iSpace",
        "116": "Israel Aerospace Industries",
        "117": "Israeli Space Agency",
        "118": "Italian Space Agency",
        "119": "Japan Aerospace Exploration Agency",
        "120": "JSC Information Satellite Systems",
        "121": "Kazakh Space Research Institute",
        "122": "KB Mashinostroyeniya",
        "123": "Khrunichev State Research and Production Space Center",
        "124": "Kongsberg Defence & Aerospace",
        "125": "Korea Aerospace Research Institute",
        "126": "Korean Astronaut Program",
        "127": "Korean Committee of Space Technology",
        "128": "Land Launch",
        "129": "LandSpace",
        "130": "Lithuanian Space Association",
        "131": "Lockheed Martin",
        "132": "Lockheed Martin Space Operations",
        "133": "Lockheed Space Operations Company",
        "134": "Makeyev Rocket Design Bureau",
        "135": "Malaysian National Space Agency",
        "136": "Martin Marietta",
        "137": "Masten Space Systems",
        "138": "McDonnell Douglas",
        "139": "MEASAT Satellite Systems",
        "140": "Mexican Satellite System",
        "141": "Mexican Space Agency",
        "142": "Ministry of Defence of the Russian Federation",
        "143": "Ministry of Transport of the Czech Republic - Space Technologies and Satellite Systems Department",
        "144": "Missile Defense Agency",
        "145": "Mitsubishi Heavy Industries",
        "146": "Mohammed bin Rashid Space Centre",
        "147": "Moscow Institute of Thermal Technology",
        "148": "National Aeronautics and Space Administration",
        "149": "National Authority for Remote Sensing and Space Sciences",
        "150": "National Center of Space Research",
        "151": "National Commission for Aerospace Research and Development",
        "152": "National Commission for Space Research",
        "153": "National Institute of Aeronautics and Space",
        "154": "National Oceanic and Atmospheric Administration",
        "155": "National Reconnaissance Office",
        "156": "National Remote Sensing Center of Mongolia",
        "157": "National Remote Sensing Center of Tunisia",
        "158": "National Research Council",
        "159": "National Security Agency",
        "160": "National Space Activities Commission",
        "161": "National Space Agency (KazCosmos)",
        "162": "National Space Agency of the Republic of Kazakhstan",
        "163": "National Space Agency of Ukraine",
        "164": "National Space Development Agency of Japan",
        "165": "National Space Organization",
        "166": "National Space Research and Development Agency",
        "167": "Netherlands Institute for Space Research",
        "168": "North American Aviation",
        "169": "Northrop Grumman Innovation Systems",
        "170": "Northrop Grumman Space Technology",
        "171": "Norwegian Space Centre",
        "172": "NPO Lavochkin",
        "173": "OHB System",
        "174": "OneSpace",
        "175": "Optus",
        "176": "Orbital ATK",
        "177": "Orbital Sciences Corporation",
        "178": "Pakistan Space and Upper Atmosphere Research Commission",
        "179": "PanAmSat",
        "180": "Paradigm Secure Communications",
        "181": "People's Liberation Army",
        "182": "Philco Ford",
        "183": "Planetary Resources",
        "184": "Planet Labs",
        "185": "PlanetSpace",
        "186": "Polish Space Agency",
        "187": "Production Corporation Polyot",
        "188": "Progress Rocket Space Center",
        "189": "ProtoStar",
        "190": "PT Telkom",
        "191": "Reaction Engines Ltd.",
        "192": "Regional African Satellite Communication Organization",
        "193": "Relativity Space",
        "194": "RKK Energiya",
        "195": "Robotics Institute",
        "196": "Rocketdyne",
        "197": "Rocket Lab Ltd",
        "198": "Rockwell International",
        "199": "Romanian Space Agency",
        "200": "Royal Aircraft Establishment",
        "201": "Royal Australian Air Force",
        "202": "Royal Centre for Remote Sensing",
        "203": "RUAG Space",
        "204": "Russian Aerospace Defence Forces",
        "205": "Russian Federal Space Agency (ROSCOSMOS)",
        "206": "Russian Space Forces",
        "207": "Sandia National Laboratories",
        "208": "Satmex",
        "209": "Scaled Composites",
        "210": "Science and Engineering Research Council",
        "211": "Scorpius Space Launch Company",
        "212": "Sea Launch",
        "213": "SES",
        "214": "Sierra Nevada Corporation",
        "215": "SKY Perfect JSAT Group",
        "216": "Snecma",
        "217": "Société d'étude et de réalisation d'engins balistiques",
        "218": "South African National Space Agency",
        "219": "Southern Launch",
        "220": "Soviet Space Program",
        "221": "Space Adventures",
        "222": "SpaceDev",
        "223": "Spaceflight Launch Services",
        "224": "Space Florida",
        "225": "SpaceQuest, Ltd.",
        "226": "Space Research and Remote Sensing Organization",
        "227": "Space Research Centre",
        "228": "Space Research Institute of Saudi Arabia",
        "229": "Space Services Inc.",
        "230": "Space Systems/Loral",
        "231": "SpaceX",
        "232": "SPAR Aerospace",
        "233": "Spire Global",
        "234": "Sri Lanka Space Agency",
        "235": "Star One",
        "236": "Starsem SA",
        "237": "Strategic Missile Troops",
        "238": "Surrey Satellite Technology Ltd",
        "239": "Swales Aerospace",
        "240": "Swedish National Space Board",
        "241": "Swedish Space Corp",
        "242": "Swiss Space Office",
        "243": "Technical University of Denmark - National Space Institute",
        "244": "Telesat",
        "245": "Tethers Unlimited, Inc.",
        "246": "Thaicom",
        "247": "Thales Alenia Space",
        "248": "TiSPACE",
        "249": "TRW",
        "250": "TUBITAK Space Technologies Research Institute",
        "251": "Turkish Aerospace Industries",
        "252": "Turkmenistan National Space Agency",
        "253": "Türksat",
        "254": "UK Ministry Of Defence",
        "255": "UK Space Agency",
        "256": "United Launch Alliance",
        "257": "United Nations Committee on the Peaceful Uses of Outer Space",
        "258": "United Nations Office for Outer Space Affairs",
        "259": "United Space Alliance",
        "260": "United States Air Force",
        "261": "United States Departement of Defense",
        "262": "UP Aerospace",
        "263": "US Army",
        "264": "US Navy",
        "265": "Uzbek State Space Research Agency (UzbekCosmos)",
        "266": "Vector",
        "267": "Vietnam Posts and Telecommunications Group",
        "268": "Virgin Galactic",
        "269": "Virgin Orbit",
        "270": "Vought",
        "271": "Weapons Research Establishment",
        "272": "WildBlue",
        "273": "XCOR  Aerospace",
        "274": "XTAR LLC",
        "275": "Yuzhnoye Design Bureau"
    }
}
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</sub-flow>
	<sub-flow name="databaseFilling" doc:id="cfa6f628-dfdd-46d4-a793-a3dda03f9c24">
		<flow-ref doc:name="start_log and variables" doc:id="1e68e8de-fee0-4b50-ab5b-6cbf62bfe05c" name="start_log_and_variables" />
		<validation:matches-regex doc:name="Check for offset validity" doc:id="7e3232df-aab0-4373-bf1e-259b5af4c3ec" regex="${validation.offset.regex}" config-ref="Validation_Config" value="#[vars.offset]" message="${validation.offset.message}">
			<error-mapping targetType="APP:WRONG_OFFSET" />
		</validation:matches-regex>
		<os:retrieve doc:name="Retrieve name_offset_pairs" doc:id="da5bcba8-6150-4a3b-9bc2-c56c1e7b474e" key="name_offset_pairs" target="name_offset_pairs">
			<os:default-value ><![CDATA[#[%dw 2.0
output application/json
---
{}]]]></os:default-value>
		</os:retrieve>
		<choice doc:name="Choice" doc:id="7e44dd8d-c448-4a6c-a623-595405099061" >
			<when expression='#[(vars.name_offset_pairs.*"$(vars.name)" != null) and (vars.name_offset_pairs.*"$(vars.name)" contains vars.offset)]'>
				<raise-error doc:name="APP:OFFSET_ALREADY_USED error" doc:id="aad9223a-0a08-4180-a028-c50627692a72" type="APP:OFFSET_ALREADY_USED" description='Data from this page has already been added to the database. Try another offset'/>
			</when>
			<otherwise >
				<logger level="INFO" doc:name="Logger" doc:id="3df6b54f-7258-48b7-9aab-331ffa0cdf69" message="Data from this page has not yet been added to the database."/>
			</otherwise>
		</choice>
		<flow-ref doc:name="primaryDataRetrieving" doc:id="409d53b6-84a5-45df-bd7c-0b51d7129fcb" name="primaryDataRetrieving" />
		<choice doc:name="Choice" doc:id="c3ce8653-07ba-4d41-866a-878cd8b2a0f6">
			<when expression="#[vars.offset &gt; Mule::p('offset_limitations.stations') and vars.offset &lt; Mule::p('offset_limitations.rockets')]">
				<ee:transform doc:name="Formatting data to add to the database" doc:id="af4fedfb-bcf3-43c6-bb09-7c4799983fc5">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
[ if (sizeOf(payload."0".payload) == 0) {
    agency: vars.name,
    rockets: {
      rockets_count: sizeOf(payload."2".payload),
	  rockets_list: payload."2".payload
	}
  } else if (sizeOf(payload."2".payload) == 0) {
    agency: vars.name,
    launches: {
      launches_count: sizeOf(payload."0".payload),
	  launches_list: payload."0".payload
	}
  } else {
    agency: vars.name,
    launches: {
      launches_count: sizeOf(payload."0".payload),
	  launches_list: payload."0".payload
	},
    rockets: {
      rockets_count: sizeOf(payload."2".payload),
	  rockets_list: payload."2".payload
	}
  }
]]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</when>
			<when expression="#[vars.offset &gt;= Mule::p('offset_limitations.rockets')]">
				<choice doc:name="Choice" doc:id="a31f8a2f-9a02-4fb5-9dde-5cb88b328a13">
					<when expression='#[sizeOf(payload."0".payload) == 0]'>
						<raise-error doc:name="APP:ALL_EMPTY error" doc:id="aa7893ac-d392-4ab7-b14a-b7ba544d0d74" type="APP:ALL_EMPTY" description="No data to add to database." />
					</when>
					<otherwise>
						<ee:transform doc:name="Formatting data to add to the database" doc:id="8bfce8ea-2c5f-4252-80b3-54499a7229e5">
							<ee:message>
								<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
[{
  agency: vars.name,
  launches: {
    launches_count: sizeOf(payload."0".payload),
	launches_list: payload."0".payload
  }
}]]]></ee:set-payload>
							</ee:message>
						</ee:transform>
					</otherwise>
				</choice>
			</when>
			<otherwise>
				<ee:transform doc:name="Formatting data to add to the database" doc:id="6434c1b9-5aef-4731-80a0-e2c286f61a99">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
[ if (sizeOf(payload."1".payload) == 0 and sizeOf(payload."0".payload) == 0) {
    agency: vars.name,
    rockets: {
      rockets_count: sizeOf(payload."2".payload),
	  rockets_list: payload."2".payload
	}
  } else if (sizeOf(payload."1".payload) == 0 and sizeOf(payload."2".payload) == 0) {
    agency: vars.name,
    launches: {
      launches_count: sizeOf(payload."0".payload),
	  launches_list: payload."0".payload
	}
  } else if (sizeOf(payload."0".payload) == 0 and sizeOf(payload."2".payload) == 0) {
    agency: vars.name,
    stations: {
      stations_count: sizeOf(payload."1".payload),
	  stations_list: payload."1".payload
	}
  } else if (sizeOf(payload."1".payload) == 0) {
    agency: vars.name,
    launches: {
      launches_count: sizeOf(payload."0".payload),
	  launches_list: payload."0".payload
	},
    rockets: {
      rockets_count: sizeOf(payload."2".payload),
	  rockets_list: payload."2".payload
	}
  } else if (sizeOf(payload."0".payload) == 0) {
    agency: vars.name,
    stations: {
      stations_count: sizeOf(payload."1".payload),
	  stations_list: payload."1".payload
	},
    rockets: {
      rockets_count: sizeOf(payload."2".payload),
	  rockets_list: payload."2".payload
	}
  } else if (sizeOf(payload."2".payload) == 0) {
    agency: vars.name,
    stations: {
      stations_count: sizeOf(payload."1".payload),
	  stations_list: payload."1".payload
	},
    launches: {
      launches_count: sizeOf(payload."0".payload),
	  launches_list: payload."0".payload
	}
  } else {
    agency: vars.name,
    stations: {
      stations_count: sizeOf(payload."1".payload),
	  stations_list: payload."1".payload
	},
    launches: {
      launches_count: sizeOf(payload."0".payload),
	  launches_list: payload."0".payload
	},
    rockets: {
      rockets_count: sizeOf(payload."2".payload),
	  rockets_list: payload."2".payload
	}
  }
]]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</otherwise>
		</choice>
		<os:store doc:name="Store name_offset_pairs" doc:id="21573430-c00f-411a-aa72-6f74ec7de9f0" key="name_offset_pairs">
			<os:value ><![CDATA[#[%dw 2.0
output application/json
var name = vars.name
---
vars.name_offset_pairs ++ {"$(name)": vars.offset}]]]></os:value>
		</os:store>
		<set-variable value='#[Mule::p("records.write_folder") ++ vars.name as String ++ " - offset " ++ vars.offset as String ++ " - date " ++&#10;&#10;now() as String {format: "yyyy-MM-dd"} ++ " - time " ++&#10;&#10;now() as String {format: "hh-m-s"} ++ ".json"]' doc:name="Set file_name" doc:id="2073bf49-733f-42c4-9494-65ef1a76e1f0" variableName="file_name" />
		<choice doc:name="Choice" doc:id="c675d5d3-0efc-4a10-962e-e7325fee9fc2" >
			<when expression="#[java!org::spaceagencies::utils::FileOperations::isDirectoryExists(Mule::p('records.write_dir') as String) == false]">
				<file:create-directory doc:name="Create directory" doc:id="864da14b-1fa4-4a44-8e09-3e94206676c1" config-ref="File_Config_No_Dir" directoryPath='#[Mule::p("records.write_folder")]'/>
			</when>
			<otherwise>
				<logger level="INFO" doc:name="Directory exists logger" doc:id="3f7abfd7-9017-407f-b90d-7cf94b771107" message='#["The directory already exists"]'/>
			</otherwise>
		</choice>
		<file:write doc:name="Write payload to file" doc:id="a128965e-96f5-4521-89a3-0747a6cff68b" config-ref="File_Config" path="#[vars.file_name]" mode="CREATE_NEW">
        </file:write>
		<logger level="INFO" doc:name="End logger" doc:id="b0d6a825-fbab-4c3c-9a02-eb8852842a99" message="Data has been added to the file #[vars.file_name]"/>
	
</sub-flow>
	<flow name="setToDB" doc:id="b0bcf273-d7d4-464b-93f5-836d437bdbbd">
		<file:listener doc:name="On New or Updated File" doc:id="d9448635-5362-4ab6-83a1-65274489956c" config-ref="File_Config" directory="C:\Users\Natalka\AnypointStudio\demo-workspace\agencies-api\src\main\resources\Write" autoDelete="true">
			<scheduling-strategy>
				<fixed-frequency frequency="5" timeUnit="SECONDS" />
			</scheduling-strategy>
			<file:matcher filenamePattern="*.json" />
		</file:listener>
		<set-variable value="#[java!org::spaceagencies::utils::FileOperations::isFileExists(Mule::p('records.id_dir') as String, Mule::p('records.file') as String)]" doc:name="Set checkIdFile" doc:id="baf30047-349d-44cb-8da6-6300a1c2967c" variableName="checkIdFile" />
		<choice doc:name="Choice" doc:id="19c97036-740e-48a5-b812-82398353e1a0">
			<when expression="#[vars.checkIdFile == false]">
				<ee:transform doc:name="DB object representation" doc:id="65935a6f-2471-4e72-bb10-8ba9aa39be0f">
					<ee:message />
					<ee:variables>
						<ee:set-variable variableName="record"><![CDATA[%dw 2.0
output application/json
---
if ( payload.stations == null and payload.launches == null ) payload map (record, index) -> {
	r_id: 0,
	agency: record.agency,
	rockets: record.rockets
} else if ( payload.stations == null and payload.rockets == null ) payload map (record, index) -> {
	r_id: 0,
	agency: record.agency,
	launches: record.launches
} else if ( payload.launches == null and payload.rockets == null ) payload map (record, index) -> {
	r_id: 0,
	agency: record.agency,
	stations: record.stations
} else if ( payload.stations == null ) payload map (record, index) -> {
	r_id: 0,
	agency: record.agency,
	launches: record.launches,
	rockets: record.rockets
} else if ( payload.launches == null ) payload map (record, index) -> {
	r_id: 0,
	agency: record.agency,
	stations: record.stations,
	rockets: record.rockets
} else if ( payload.rockets == null ) payload map (record, index) -> {
	r_id: 0,
	agency: record.agency,
	stations: record.stations,
	launches: record.launches
} else
  payload map (record, index) -> {
	r_id: 0,
	agency: record.agency,
	stations: record.stations,
	launches: record.launches,
	rockets: record.rockets
}]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<file:write doc:name="Write id" doc:id="feb1188c-7490-4ca8-a17c-c85b94842817" config-ref="File_Config" path='#[Mule::p("records.id_folder") ++ Mule::p("records.file")]' mode="CREATE_NEW">
					<file:content><![CDATA[#[vars.record[0].r_id as Number + 1]]]></file:content>
				</file:write>
			</when>
					<otherwise>
				<ee:transform doc:name="DB object representation" doc:id="adc37c48-2f60-4ee5-9cea-5c2c690f9da3">
					<ee:message />
					<ee:variables>
						<ee:set-variable variableName="record"><![CDATA[%dw 2.0
output application/json
var r_id = java!org::spaceagencies::utils::FileOperations::fileReader(Mule::p("records.id_folder") ++ Mule::p("records.file"))
---
if ( payload.stations == null and payload.launches == null ) payload map (record, index) -> {
	r_id: r_id,
	agency: record.agency,
	rockets: record.rockets
} else if ( payload.stations == null and payload.rockets == null ) payload map (record, index) -> {
	r_id: r_id,
	agency: record.agency,
	launches: record.launches
} else if ( payload.launches == null and payload.rockets == null ) payload map (record, index) -> {
	r_id: r_id,
	agency: record.agency,
	stations: record.stations
} else if ( payload.stations == null ) payload map (record, index) -> {
	r_id: r_id,
	agency: record.agency,
	launches: record.launches,
	rockets: record.rockets
} else if ( payload.launches == null ) payload map (record, index) -> {
	r_id: r_id,
	agency: record.agency,
	stations: record.stations,
	rockets: record.rockets
} else if ( payload.rockets == null ) payload map (record, index) -> {
	r_id: r_id,
	agency: record.agency,
	stations: record.stations,
	launches: record.launches
} else
  payload map (record, index) -> {
	r_id: r_id,
	agency: record.agency,
	stations: record.stations,
	launches: record.launches,
	rockets: record.rockets
}]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<file:write doc:name="Write id" doc:id="ef09dcfc-f682-4483-9f94-6f0aeeee3229" config-ref="File_Config" path='#[Mule::p("records.id_folder") ++ Mule::p("records.file")]'>
					<file:content><![CDATA[#[vars.record[0].r_id as Number + 1]]]></file:content>
				</file:write>
			</otherwise>
		</choice>
		<mongo:collection-exists doc:name="Collection exists" doc:id="c5c48364-a762-42f1-a7fa-99e9e7ee67ae" config-ref="MongoDB_Config" collectionName="#[vars.record[0].agency]" />
		<choice doc:name="Choice" doc:id="b859d791-57ef-4f3b-8b6c-9428a5b2e91b">
			<when expression="#[payload==false]">
				<mongo:create-collection doc:name="Create collection" doc:id="eb0750bf-6002-4e69-8c52-c23721de8b2a" config-ref="MongoDB_Config" collectionName="#[vars.record[0].agency]" />
			</when>
			<otherwise>
				<logger level="INFO" doc:name="Collection already exists logger" doc:id="51a821c4-1d80-4554-8fd5-ff501bf0a3a2" message="Collection already exists" />
			</otherwise>
		
</choice>
		<mongo:insert-documents collectionName="#[vars.record[0].agency]" doc:name="Insert documents" doc:id="6827e0d2-c33c-47a9-8e3e-2d4d5295be86" config-ref="MongoDB_Config">
			<mongo:documents><![CDATA[#[vars.record]]]></mongo:documents>
		</mongo:insert-documents>
	</flow>
</mule>
